trigger:
  branches:
    include:
      - master

variables:
  dockerRegistryServiceConnection: 'svcfromdevopstoacr'  # ACR or DockerHub service connection
  imageRepository: 'sudarshan1994/springbootaapp1'
  containerRegistry: 'acrsringbootapp1.azurecr.io'
  dockerfilePath: 'Dockerfile'
  tag: '$(Build.BuildId)'

  azureSubscription: 'devopstoportalconnection'  # Azure Resource Manager service connection
  aksResourceGroup: 'springbootapp-rg'
  aksClusterName: 'k8ssringbootapp'
  kubernetesNamespace: 'default'
  #ingressNamespace: 'default'
  kubernetesDeploymentName: 'springboot-app'

  appManifestPath: 'CICD/k8s/*'
  #ingressManifestPath: 'CICD/k8s/*'

stages:
  - stage: Build
    displayName: Build and Push Docker Image
    jobs:
      - job: Build
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self

          - task: Gradle@3
            displayName: Build Spring Boot JAR
            inputs:
              gradleWrapperFile: 'gradlew'
              tasks: 'clean build'
              publishJUnitResults: false

          - task: Docker@2
            displayName: Build and Push Docker image
            inputs:
              containerRegistry: $(dockerRegistryServiceConnection)
              repository: $(imageRepository)
              command: buildAndPush
              Dockerfile: $(dockerfilePath)
              buildContext: '$(Build.SourcesDirectory)'
              tags: |
                $(tag)

  - stage: Deploy
    displayName: Deploy to AKS
    dependsOn: Build
    jobs:
      - job: Deploy
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: Kubernetes@1
            displayName: Deploy application manifests to default namespace
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(azureSubscription)
              azureResourceGroup: $(aksResourceGroup)
              kubernetesCluster: $(aksClusterName)
              namespace: $(kubernetesNamespace)
              command: apply
              useClusterAdmin: true
              arguments: '-f $(appManifestPath)'

          - task: Kubernetes@1
            displayName: Deploy ingress manifests to ingress-nginx namespace
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(azureSubscription)
              azureResourceGroup: $(aksResourceGroup)
              kubernetesCluster: $(aksClusterName)
              namespace: $(ingressNamespace)
              command: apply
              useClusterAdmin: true
              arguments: '-f $(ingressManifestPath)'

          - task: AzureCLI@2
            displayName: Set image in deployment
            inputs:
              azureSubscription: $(azureSubscription)
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                az aks get-credentials --resource-group $(aksResourceGroup) --name $(aksClusterName) --overwrite-existing
                kubectl set image deployment/$(kubernetesDeploymentName) springboot-container=$(containerRegistry)/$(imageRepository):$(tag) -n $(kubernetesNamespace)
